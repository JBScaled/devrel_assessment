{
  "version": 3,
  "sources": [
    "../../hello_world/contract.py"
  ],
  "mappings": ";;;;;;;;AAKA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;AAkBK;;AAAA;AAAA;AAAA;;AAAA;AAlBL;;;AAAA;;;AAkBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAPL;;;AAAA;;;AAAA;;;AAAA;;;AAOK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAPL;;AAAA;;;;;;;;;;AAOA;;;AAGqC;;;;;;;;;AAAA;;AAAA;AAAZ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAGc;;;;AAAA;;AAAA;AAA/B;;AAAA;;AAAA;;AAAA;AAAA;AAGA;AAER;;;AAGe;;AAAA;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.hello_world.contract.HelloWorld.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock 0x151f7c75"
    },
    "8": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "10": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "13": {
      "op": "pushbytess 0x5601ff52 0x9e5782c5 // method \"hello(string,string)string\", method \"getMessage(string)(string)\""
    },
    "25": {
      "op": "txna ApplicationArgs 0"
    },
    "28": {
      "op": "match main_hello_route@5 main_getMessage_route@6"
    },
    "34": {
      "block": "main_after_if_else@9",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "36": {
      "op": "return"
    },
    "37": {
      "block": "main_getMessage_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "39": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "40": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "41": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "43": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "44": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "47": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "50": {
      "callsub": "smart_contracts.hello_world.contract.HelloWorld.getMessage",
      "op": "callsub getMessage",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "53": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0x151f7c75"
      ]
    },
    "54": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%19#0"
      ]
    },
    "55": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "56": {
      "op": "log",
      "stack_out": []
    },
    "57": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "59": {
      "op": "return"
    },
    "60": {
      "block": "main_hello_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "62": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "63": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "64": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "66": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "67": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "70": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "73": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "76": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "79": {
      "callsub": "smart_contracts.hello_world.contract.HelloWorld.hello",
      "op": "callsub hello",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "82": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "83": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%11#0"
      ]
    },
    "84": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "85": {
      "op": "log",
      "stack_out": []
    },
    "86": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "88": {
      "op": "return"
    },
    "89": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "91": {
      "op": "bnz main_after_if_else@9",
      "stack_out": []
    },
    "94": {
      "op": "txn ApplicationID"
    },
    "96": {
      "op": "!"
    },
    "97": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "98": {
      "op": "pushint 1 // 1"
    },
    "100": {
      "op": "return"
    },
    "101": {
      "subroutine": "smart_contracts.hello_world.contract.HelloWorld.hello",
      "params": {
        "message#0": "bytes",
        "box_name#0": "bytes"
      },
      "block": "hello",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "104": {
      "op": "pushbytes \"Hello, \"",
      "defined_out": [
        "\"Hello, \""
      ],
      "stack_out": [
        "\"Hello, \""
      ]
    },
    "113": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"Hello, \"",
        "message#0 (copy)"
      ],
      "stack_out": [
        "\"Hello, \"",
        "message#0 (copy)"
      ]
    },
    "115": {
      "op": "concat",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "116": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "117": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "118": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "119": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "122": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "123": {
      "op": "concat",
      "defined_out": [
        "message_to_add#0"
      ],
      "stack_out": [
        "message_to_add#0"
      ]
    },
    "124": {
      "op": "pushbytes 0x0002",
      "defined_out": [
        "0x0002",
        "message_to_add#0"
      ],
      "stack_out": [
        "message_to_add#0",
        "0x0002"
      ]
    },
    "128": {
      "op": "dig 1",
      "defined_out": [
        "0x0002",
        "message_to_add#0",
        "message_to_add#0 (copy)"
      ],
      "stack_out": [
        "message_to_add#0",
        "0x0002",
        "message_to_add#0 (copy)"
      ]
    },
    "130": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "message_to_add#0"
      ],
      "stack_out": [
        "message_to_add#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "131": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_name#0 (copy)",
        "encoded_tuple_buffer%2#0",
        "message_to_add#0"
      ],
      "stack_out": [
        "message_to_add#0",
        "encoded_tuple_buffer%2#0",
        "box_name#0 (copy)"
      ]
    },
    "133": {
      "op": "box_del",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "message_to_add#0",
        "{box_del}"
      ],
      "stack_out": [
        "message_to_add#0",
        "encoded_tuple_buffer%2#0",
        "{box_del}"
      ]
    },
    "134": {
      "op": "pop",
      "stack_out": [
        "message_to_add#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "135": {
      "op": "frame_dig -1",
      "stack_out": [
        "message_to_add#0",
        "encoded_tuple_buffer%2#0",
        "box_name#0 (copy)"
      ]
    },
    "137": {
      "op": "swap",
      "stack_out": [
        "message_to_add#0",
        "box_name#0 (copy)",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "138": {
      "op": "box_put",
      "stack_out": [
        "message_to_add#0"
      ]
    },
    "139": {
      "retsub": true,
      "op": "retsub"
    },
    "140": {
      "subroutine": "smart_contracts.hello_world.contract.HelloWorld.getMessage",
      "params": {
        "box_name#0": "bytes"
      },
      "block": "getMessage",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "143": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_name#0 (copy)"
      ],
      "stack_out": [
        "box_name#0 (copy)"
      ]
    },
    "145": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "146": {
      "error": "check self.message_boxes entry exists",
      "op": "assert // check self.message_boxes entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "147": {
      "retsub": true,
      "op": "retsub"
    }
  }
}